import java.util.Scanner;

class Node {
    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinaryTree {
    Node root;
    static int[] nodeValues;
    static int[][] children;

    void inOrder(Node node) {
        if (node == null)
            return;

        inOrder(node.left);
        System.out.print(node.data);
        inOrder(node.right);
    }

    Node buildTree(int rootIndex) {
        if (rootIndex == -1) return null;
        Node node = new Node(nodeValues[rootIndex]);
        node.left = buildTree(children[rootIndex][0]);
        node.right = buildTree(children[rootIndex][1]);
        return node;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = Integer.parseInt(scanner.nextLine());
        nodeValues = new int[n];
        children = new int[n][2];

        for (int i = 0; i < n; i++) {
            String[] parts = scanner.nextLine().split(" ");
            int nodeIndex = Integer.parseInt(parts[0]) - 1; // Assuming input nodes start from 1
            nodeValues[nodeIndex] = Integer.parseInt(parts[0]);
            children[nodeIndex][0] = Integer.parseInt(parts[1]) - 1;
            children[nodeIndex][1] = Integer.parseInt(parts[2]) - 1;
        }

        BinaryTree tree = new BinaryTree();
        tree.root = tree.buildTree(0); // Assuming the first input line corresponds to the root
        tree.inOrder(tree.root);
    }
}